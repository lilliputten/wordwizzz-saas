generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model UsedLanguage {
  id         String    @id
  name       String
  userId     String
  wordsSetId String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  WordsSet   WordsSet? @relation(fields: [wordsSetId], references: [id])
  Word       Word[]

  @@map("used_languages")
}

model WordsSet {
  id            String         @id @default(cuid())
  name          String
  userId        String
  usedLanguages UsedLanguage[]
  Word          Word[]
  user          User           @relation(fields: [userId], references: [id])

  @@map("words_sets")
}

model Word {
  id         String       @id @default(cuid())
  text       String
  userId     String
  setId      String
  languageId String
  language   UsedLanguage @relation(fields: [languageId], references: [id])
  wordsSet   WordsSet     @relation(fields: [setId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  @@map("words")
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @default(now()) @map("updated_at")
  role                   UserRole       @default(USER)
  stripeCustomerId       String?        @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?        @unique @map("stripe_subscription_id")
  stripePriceId          String?        @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?      @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]
  usedLanguages          UsedLanguage[]
  words                  Word[]
  wordsSet               WordsSet[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  USER
}
